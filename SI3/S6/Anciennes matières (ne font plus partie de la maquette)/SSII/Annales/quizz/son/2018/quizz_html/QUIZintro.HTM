<html>
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Jean-Paul Stromboni."></meta><meta name="keywords" content="Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>
<title>
Introduction au module S.S.I.
</title>

<script language="javascript" type="text/javascript">

//<![CDATA[

<!--

// BrowserCheck Object

function BrowserCheck() {
	var b = navigator.appName
//HBS extension
	this.mac = (navigator.appVersion.indexOf('Mac') != -1)
	if (b=="Netscape") this.b = "ns"
	else if (b=="Microsoft Internet Explorer") this.b = "ie"
	else this.b = b
	this.version = navigator.appVersion
	this.v = parseInt(this.version)
	this.ns = (this.b=="ns" && this.v>=4)
	this.ns4 = (this.b=="ns" && this.v==4)
	this.ns5 = (this.b=="ns" && this.v==5)
	this.ie = (this.b=="ie" && this.v>=4)
	this.ie4 = (this.version.indexOf('MSIE 4')>0)
	this.ie5 = (this.version.indexOf('MSIE 5')>0)
	this.min = (this.ns||this.ie)
	this.CRAPBrowser = (this.ie && this.mac); //Cannot Resolve Addresses Properly
}

is = new BrowserCheck();

var LocFolder = GetFolder(window.location.href);
function GetFolder(LocPath){
	var i = LocPath.lastIndexOf('/');
	if (i<0){i=LocPath.lastIndexOf('\\')};
	return LocPath.substring(0,i);
}

function CombineURLs(InURL){
	var i = InURL.indexOf('../');
	var s = LocFolder;
	while (i >- 1){
		s = GetFolder(s);
		InURL = InURL.substring(3,InURL.length);
		i = InURL.indexOf('../');
	}
	return s + '/' + InURL;
}

x = new Array();
function ResolveURLs(InText,Attribute){
	x.length=0;
	var Temp = InText.toLowerCase();
	var z;
	var AttLen = Attribute.length + 2;
	var y=Temp.lastIndexOf(Attribute + '="');
	while (y>-1){
		var sLoc = y+AttLen;
		if (Temp.substring(sLoc,sLoc+5) != 'http:'){
			x[x.length]=new Array();
			x[x.length-1][0] = sLoc;
			z = Temp.indexOf('"',sLoc);
			x[x.length-1][1] = z;
			x[x.length-1][2] = Temp.substring(sLoc,z);
		}
		Temp = Temp.substring(0,y);
		y=Temp.lastIndexOf(Attribute + '="');
	}
	for (var j=x.length-1; j>-1; j--){
		InText = InText.substring(0,x[j][0]) + CombineURLs(x[j][2]) + InText.substring(x[j][1], InText.length);
	}
	return InText;
}

function ResolveAllURLs(Stuff){
	Stuff = ResolveURLs(Stuff,'href');
	Stuff = ResolveURLs(Stuff,'src');
	return Stuff;
}

var ExBGColor = '#408080'; //'#DDDDDD';
var PageBGColor = '#ffffff'; //'#FFFFFF';
var NavBarColor = '#999999'; //'#000000';
var TextColor = '#000000';
var CurrQNum = 0;
var ALetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
var CorrectIndicator = '';
var IncorrectIndicator = '';
var YourScoreIs = 'La note est :';
var Tries = 0;
var CorrectChoices = 0;
var ContinuousScoring = true;
var CorrectFirstTime = 'R&eacute;ponses correctes d&eacute;s la premi&egrave;re fois : ';var ExerciseTitle = '<h1>Introduction au module S.S.I.</h1>';
var ExerciseSubtitle = '<br /> <a href="1.Introduction.ppt" target="_blank">(Pour voir le cours associ&eacute; 1. Introduction.ppt)</a>';
var Instructions = 'Cocher au moins une r&eacute;ponse parmi les r&eacute;ponses correctes'; //'';
var ShuffleQs = true;
var ShuffleAs = true;
var DefaultRight = 'Vrai';
var DefaultWrong = 'Faux';
var QsToShow = 8;
var ShowOneByOne = true;
var ReadingURL = '';

var PreviousPage = history.length;







var NavBar='';


NavBar+='<tr><form name="NavButtons1" action=""><td bgcolor="#999999" align="center">';
NavBar+='<font face="Geneva,Arial" size="-1">';


NavBar+='<input type="button" value="Revenir &agrave; la page du module SSI" onclick="parent.location=\'index.html\'"></input>';


NavBar+='</font></td></form></tr>';


var TitleCode = '<tr><td align="center" valign="middle" bgcolor="#ffffff">';
TitleCode += '<font size="+1" face="Geneva,Arial" color="#000000">' + ExerciseTitle + '</font><br />';
TitleCode += '<font size="-1" face="Geneva,Arial" color="#000000">' + ExerciseSubtitle + '<br />';
TitleCode += '</font></td></tr>';


macrightchar = 'Vrai'
macwrongchar = 'Faux'
winrightchar = 'Vrai'
winwrongchar = 'Faux'


var QButtonsOpener = '<table border="0" width="85%" cellpadding="10">';
QButtonsOpener += '<tr><td align="center" valign="middle"><form>';
QButtonsOpener += '<font size="+1"><input type="button" value="&lt;=" onclick="parent.ChangeQ(-1)"></input>';
var QButtonsCloser = '<input type="button" value="=&gt;" onclick="parent.ChangeQ(1)"></input>';
QButtonsCloser += '</font></form></td></tr></table>';

var TableOpener = '<form name="QForm">';
TableOpener += '<table border="0" width="85%">';
var QRow = '<tr><td valign="top" bgcolor="#408080" align="right">';
QRow += '<font size="+1" face="Geneva,Arial" color="#000000">[QNumber]</font></td>';
QRow += '<td colspan="3" valign="top" bgcolor="#408080"><font size="-1" face="Geneva,Arial" color="#000000">[Question]<br />&nbsp;';
QRow += '</font></td></tr>';

var ARow = '<tr><td></td><td valign="top" bgcolor="#408080"><input type="text" value=" " size="3" name="FB_[QNum]_[ANum]"></input></td>';
ARow += '<td valign="top" bgcolor="#408080"><input type="button" value="[ALetter]" OnClick="parent.CheckAnswer([QNum],[ANum])"></input></td>';
ARow += '<td width="100%" bgcolor="#408080"><font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var MARow = '<tr><td></td><td valign="top" bgcolor="#408080" colspan="3"><input type="checkbox" name="A_[QNum]_[ANum]" value="[Correct]"></input>';
MARow += '<font size="-1" face="Geneva,Arial" color="#000000">[Ans]</font></td></tr>';

var CheckButton = '<tr><td></td><td valign="top" bgcolor="';
CheckButton += ExBGColor;
CheckButton += '" ><input type="button" value="V&eacute;rification de la r&eacute;ponse"';
CheckButton += ' onclick="parent.CheckMulti([QNum])"></input></td></tr>';

TableCloser = '</table></form>';

function GoBack(){
	var BackSkip = history.length - PreviousPage;
	if (BackSkip > 0){
		history.go((BackSkip+1)*-1);
	}
	else{
		parent.history.back();
	}
}

function ReduceItems(){
	var ItemToDump=0;
	var j=0;
	while (I.length > QsToShow){
		ItemToDump = Math.floor(I.length*Math.random());
		for (j=ItemToDump; j<(I.length-1); j++){
			I[j] = I[j+1];
		}
		I.length = I.length-1;
	}
}

function Shuffle(InArray){
	Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < j; k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteFeedback(Feedback) {
	if (is.CRAPBrowser){Feedback=ResolveAllURLs(Feedback);}
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000cc" vlink="#ff8040">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += NavBar;
	if (Feedback.length>0){
		OutString += '<tr><td bgcolor="#408080" align="center">'; 
		OutString += '<font face="Geneva,Arial" size="-1" color="#000000">';
		OutString += Feedback;
		OutString += '</font></td></tr>'
	}
	OutString += '</table></center></body></html>';
//Write it to the frame
	TopFrame.document.clear();
	TopFrame.document.open();
	TopFrame.document.write(OutString);
	TopFrame.document.close();
}

function StartUp(){

	if ((is.mac)&&(is.ns)){
		CorrectIndicator = unescape(macrightchar);
		IncorrectIndicator = unescape(macwrongchar);
	}
	else{
		CorrectIndicator = unescape(winrightchar);
		IncorrectIndicator = unescape(winwrongchar);
	}


//Write the top frame
	WriteFeedback(Instructions);



//Reduce array if required
	if (QsToShow < I.length){
		ReduceItems();
	}

//Shuffle stuff if required

	if (ShuffleQs == true){
		I = Shuffle(I);
	}

	if (ShuffleAs == true){
		for (var i=0; i<I.length; i++){
			I[i][1] = Shuffle(I[i][1]);
		}
	}

//Create arrays
	CreateStatusArrays();



//Show the first question or all of them
	if (ShowOneByOne == false){
		ShowAllQs();
	}
	else{
		ShowQuestion(CurrQNum);
	}
}


I = new Array();

I[0] = new Array();
I[0][0]='Quelle est l\'URL du module S.S.I. ?';
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0]='http://www.ssi.fr';
I[0][1][0][1]='Faux';
I[0][1][0][2] = 0;
I[0][1][1] = new Array();
I[0][1][1][0]='www-local.essi.fr/modulessi';
I[0][1][1][1]='Faux';
I[0][1][1][2] = 0;
I[0][1][2] = new Array();
I[0][1][2][0]='www-local.essi.fr/ModuleSSI';
I[0][1][2][1]='Juste';
I[0][1][2][2] = 1;
I[0][2] = 0;

I[1] = new Array();
I[1][0]='Que vaut la quantit&eacute; 2 exprim&eacute;e en d&eacute;cibel (dB)';
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0]='2 dB';
I[1][1][0][1]='Faux';
I[1][1][0][2] = 0;
I[1][1][1] = new Array();
I[1][1][1][0]='2*20=40 dB';
I[1][1][1][1]='Faux';
I[1][1][1][2] = 0;
I[1][1][2] = new Array();
I[1][1][2][0]='20 dB environ';
I[1][1][2][1]='Faux';
I[1][1][2][2] = 0;
I[1][1][3] = new Array();
I[1][1][3][0]='20*log10(2) ';
I[1][1][3][1]='Juste';
I[1][1][3][2] = 1;
I[1][1][4] = new Array();
I[1][1][4][0]='&agrave; peu pr&egrave;s 6 dB';
I[1][1][4][1]='Juste';
I[1][1][4][2] = 1;
I[1][2] = 0;

I[2] = new Array();
I[2][0]='qu\'est ce qu\'une octave';
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0]='passer de f &agrave; 2*f, un rapport de 2';
I[2][1][0][1]='Juste';
I[2][1][0][2] = 1;
I[2][1][1] = new Array();
I[2][1][1][0]='un rapport de fr&eacute;quences de 8, passer de f &agrave; 8*f c\'est gravir une octave';
I[2][1][1][1]='Faux';
I[2][1][1][2] = 0;
I[2][1][2] = new Array();
I[2][1][2][0]='passer de LA3 &agrave; LA4 en musique';
I[2][1][2][1]='Juste';
I[2][1][2][2] = 1;
I[2][2] = 0;

I[3] = new Array();
I[3][0]='Que r&eacute;alise l\'&eacute;quation suivante ?<br />y(nTe)=x(nTe)-x(nTe-Te)';
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0]='un filtre d&eacute;rivateur discret';
I[3][1][0][1]='Juste';
I[3][1][0][2] = 1;
I[3][1][1] = new Array();
I[3][1][1][0]='une int&eacute;gration en temps discret';
I[3][1][1][1]='Faux';
I[3][1][1][2] = 0;
I[3][1][2] = new Array();
I[3][1][2][0]='un filtre passe bas programmable';
I[3][1][2][1]='Faux';
I[3][1][2][2] = 0;
I[3][2] = 0;

I[4] = new Array();
I[4][0]='Qu\'appelle t\'on signal discret ?';
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0]='un signal peu audible';
I[4][1][0][1]='Faux';
I[4][1][0][2] = 0;
I[4][1][1] = new Array();
I[4][1][1][0]='un signal quantifi&eacute; sur peu de bits';
I[4][1][1][1]='Faux';
I[4][1][1][2] = 0;
I[4][1][2] = new Array();
I[4][1][2][0]='un signal d&eacute;fini pour une suite d\'instants discrets';
I[4][1][2][1]='Juste';
I[4][1][2][2] = 1;
I[4][2] = 0;

I[5] = new Array();
I[5][0]='Qu\'est ce qu\'un son ?';
I[5][1] = new Array();
I[5][1][0] = new Array();
I[5][1][0][0]='un ph&eacute;nom&egrave;ne physique';
I[5][1][0][1]='Juste';
I[5][1][0][2] = 1;
I[5][1][1] = new Array();
I[5][1][1][0]='une vibration de l\'air ou de l\'eau ... qui se propage';
I[5][1][1][1]='Juste';
I[5][1][1][2] = 1;
I[5][1][2] = new Array();
I[5][1][2][0]='un signal';
I[5][1][2][1]='Faux';
I[5][1][2][2] = 0;
I[5][2] = 0;

I[6] = new Array();
I[6][0]='Donner la fr&eacute;quence du signal x(t) = 0.5*sin(880*pi*t)';
I[6][1] = new Array();
I[6][1][0] = new Array();
I[6][1][0][0]='1/440 sec';
I[6][1][0][1]='Faux';
I[6][1][0][2] = 0;
I[6][1][1] = new Array();
I[6][1][1][0]='1/880 seconde';
I[6][1][1][1]='Faux';
I[6][1][1][2] = 0;
I[6][1][2] = new Array();
I[6][1][2][0]='440 Hz';
I[6][1][2][1]='Juste';
I[6][1][2][2] = 1;
I[6][1][3] = new Array();
I[6][1][3][0]='880 Hz';
I[6][1][3][1]='Faux';
I[6][1][3][2] = 0;
I[6][2] = 0;

I[7] = new Array();
I[7][0]='Donner un nombre complexe d\'argument 90&#176; et de module 6 dB';
I[7][1] = new Array();
I[7][1][0] = new Array();
I[7][1][0][0]='2/(90*i)';
I[7][1][0][1]='Faux';
I[7][1][0][2] = 0;
I[7][1][1] = new Array();
I[7][1][1][0]='6+90*i';
I[7][1][1][1]='Faux';
I[7][1][1][2] = 0;
I[7][1][2] = new Array();
I[7][1][2][0]='2*i';
I[7][1][2][1]='Juste';
I[7][1][2][2] = 1;
I[7][1][3] = new Array();
I[7][1][3][0]='6*i (avec i*i=-1)';
I[7][1][3][1]='Faux';
I[7][1][3][2] = 0;
I[7][2] = 0;


Status = new Array();


function CreateStatusArrays(){
	for (var x=0; x<I.length; x++){
		Status[x] = new Array();
		Status[x][0] = 0; // Question not done yet
		Status[x][1] = new Array(); //for tracking whether answers chosen
		for (var y=0; y<I[x][1].length; y++){
			Status[x][1][y] = '0'; //Answers not chosen yet
		}
		Status[x][2] = 0; //Tries at this question so far
	}
}

function ReplaceStuff(Token, Replacement, InString){
	var i = InString.indexOf(Token);
	var FirstBit = '';
	var LastBit = '';
	while (i>-1){
		FirstBit = InString.substring(0, i);
		LastBit = InString.substring(i + Token.length, InString.length);	
		InString = FirstBit + Replacement + LastBit;
		i = InString.indexOf(Token);
	}
	return InString;
}

function ChangeQ(ChangeBy){
	var NewNum = CurrQNum + ChangeBy;
	if ((NewNum >= 0)&&(NewNum<I.length)){
		CurrQNum = NewNum;
		ShowQuestion(CurrQNum);
	}
}

function BuildQuestion(QNum){
	if (I[QNum][2] == 0){
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);

		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = ARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[ALetter]', ' ' + ALetters.charAt(i) + ' ', TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	else{
		var Temp = ReplaceStuff('[Question]', I[QNum][0], QRow);
		var AnsRows = '';
		for (var i=0; i<I[QNum][1].length; i++){
			TempAns = MARow;
			TempAns = ReplaceStuff('[ANum]', i, TempAns);
			TempAns = ReplaceStuff('[Correct]', I[QNum][1][i][2], TempAns);
			TempAns = ReplaceStuff('[Ans]', I[QNum][1][i][0], TempAns);
			AnsRows += TempAns;
		}
		Temp += AnsRows;
		Temp += CheckButton;
		Temp = ReplaceStuff('[QNumber]', QNum+1, Temp);
		Temp = ReplaceStuff('[QNum]', QNum, Temp);
	}
	return Temp;
}

function DisplayExercise(StuffToDisplay){
//Build the output string
	var OutString = '';
	OutString += '<html>';
	OutString += '<body  background="" bgcolor="#ffffff" text="#000000" link="#0000cc" vlink="#ff8040">';
	OutString += '<center><table border="0" cellpadding="5" cellspacing="1" width="85%">';
	OutString += TitleCode; 
	OutString += '<tr><td bgcolor="#408080" align="center">'; 
	OutString += '<font face="Geneva,Arial" size="-1">';
	OutString += StuffToDisplay;
	OutString += '</font></td></tr>';
	OutString += NavBar;
	OutString += '</table></center></body></html>';

	if (is.CRAPBrowser){OutString=ResolveAllURLs(OutString);}

//Write it to the frame
	BottomFrame.document.clear();
	BottomFrame.document.open();
	BottomFrame.document.write(OutString);
	BottomFrame.document.close();
}


function ShowAllQs(){
	var Output = '';
	for (var i=0; i<I.length-1; i++){
		Output = Output + BuildQuestion(i);
		Output = Output + '<tr><td colspan="4"><hr></hr></td></tr>';
	}
	Output = Output + BuildQuestion(I.length-1);
	Output = TableOpener + Output + TableCloser;
	DisplayExercise(Output);
}

function ShowQuestion(QNum){
//First, create the Q number readout at the top
	var Readout = (QNum+1) + '/' + I.length;
	while (Readout.length < 7){
		Readout = ' ' + Readout + ' ';
	}
	Readout = QButtonsOpener + Readout + QButtonsCloser;

	var Output = BuildQuestion(QNum);

	Output = TableOpener + Output + TableCloser;

	DisplayExercise(Readout + Output);

//Mark the answers already done
	for (i=0; i<Status[QNum][1].length; i++){
		if (Status[QNum][1][i] == 'R'){
			MarkAnswer(QNum,i,true)
		}
		if (Status[QNum][1][i] == 'W'){
			MarkAnswer(QNum,i,false)
		}
		if (Status[QNum][1][i] == 'C'){
			CheckCheckbox(QNum,i);
		}
	}
}

function CheckMulti(QNum){
	var TotWrong = 0;
	var Output = '';
	var TotAns = I[QNum][1].length;
	for (var i=TotAns-1; i>=0; i--){
//Find any incorrect choices

		var b = eval('BottomFrame.document.QForm.A_' + QNum + '_' + i);

		if (b != null){
//if it's wrong, count it
			if (b.checked == true){
				Status[QNum][1][i] = 'C';
			}
			else{
				Status[QNum][1][i] = 'U';
			}
			if (((b.checked == true) && (b.value == "0"))||((b.checked == false)&&(b.value == "1"))){
				TotWrong++;
			}
		}				
	}

	if (TotWrong == 0){
		Output = DefaultRight;
	}
	else{
		Output = DefaultWrong + '<br />' + (TotAns-TotWrong) + '/' + TotAns;
	}

//If you haven't tried the question before
	if (Status[QNum][0] == 0){
		Status[QNum][2]++;
		Tries++;
		if (TotWrong == 0){
			Status[QNum][0] = 1;
			CorrectChoices++;
		}
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var Score = (Math.floor(100 * (CorrectChoices/Tries)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 1){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}

}

function CheckAnswer(QNum, ANum){
	var Output = I[QNum][1][ANum][1];

	if (Output==''){
		if (I[QNum][1][ANum][2] == 1){
			Output = DefaultRight;
		}
		else{
			Output = DefaultWrong;
		}
	}

//If it's not been previously answered correctly
	if (Status[QNum][0] == 0){
		Status[QNum][2]++; //increment tries for this Q
//If it's a correct answer
		if (I[QNum][1][ANum][2] == 1){
			Status[QNum][0] = 1;//Mark the Q as done
			Status[QNum][1][ANum] = 'R';
			MarkAnswer(QNum, ANum, true);
			CorrectChoices++;
		}
		else{
			Status[QNum][1][ANum] = 'W';
			MarkAnswer(QNum, ANum, false);
		}
		Tries++;
	}

//Check whether the quiz is finished
	var Finished = true;
	for (var i=0; i<Status.length; i++){
		if (Status[i][0] == 0){Finished = false;}
	}

//Calculate the score if needed
		
	if (Status[QNum][0] == 1){
		if ((Finished==true)||(ContinuousScoring==true)){
			var Score = (Math.floor(100 * (CorrectChoices/Tries)));
			Output = Output + '<br />' + YourScoreIs + ' ' + Score + '%.';
		}

		if (Finished == true){
			var CFT = 0;
			for (i=0; i<I.length; i++){
				if (Status[i][2] == 1){
					CFT++;
				}
			}
		Output += '<br />' + CorrectFirstTime + CFT + '/' + I.length;

		}
	}

//Show the feedback
	if (Output.length > 0){
		WriteFeedback(Output);
	}
}

function MarkAnswer(QNum, ANum, Right){
	var Mark = CorrectIndicator;
	if (Right == false){Mark = IncorrectIndicator;}

	if (eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.FB_' + QNum + '_' + ANum).value = Mark;
	}
}

function CheckCheckbox(QNum, ANum){
	if (eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum) != null){
		eval('BottomFrame.document.QForm.A_' + QNum + '_' + ANum).checked = true;
	}
}







function Blank(){
	return '<html><body>&copy;Half-Baked Software. Loading...</body></html>';
}

//-->

//]]>

</script>


</head>
<!--<body>Fool those dumb ad-inserting ISPs</body>-->

<!--For full XHTML 1.0 compatibility, remove the border and framespacing attributes.
These are required for proper display in current browsers, but render the document incompatible. Then, you'll need to add the appropriate Document Type Declaration; use
the W3C XHTML 1 frameset DTD.-->


<frameset rows="20%,*" onload="StartUp()" framespacing="0" border="0">
	<frame src="javascript:parent.Blank()" frameborder="0" name="TopFrame"></frame>
	<frame src="javascript:parent.Blank()" frameborder="0" name="BottomFrame"></frame>
</frameset>




</html>
